# -*- coding: utf-8 -*-
"""circum_sphere

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YncydsXf5p5nAbBU8vn3qlouo82Y8f18
"""

import numpy as np
from scipy.spatial import Delaunay

# (3D)
# Open the file and read the vertices as strings
with open("bunny.xyz", "r") as f:
    vertex_strings = f.readlines()

# Convert the vertex strings to a NumPy array of shape (N, 3)
points3D = np.zeros((len(vertex_strings), 3))
for i, vertex_str in enumerate(vertex_strings):
    vertex_arr = [float(coord) for coord in vertex_str.strip().split()]
    points3D[i] = vertex_arr

tri = Delaunay(points3D)


def circumradius_triangle(tetra):
    # Compute the circumcenter and circumradius of a triangle
    A = tetra[0]
    B = tetra[1]
    C = tetra[2]
    a = np.linalg.norm(np.array(B) - np.array(C))
    b = np.linalg.norm(np.array(A) - np.array(C))
    c = np.linalg.norm(np.array(A) - np.array(B))
    area = 0.5*np.abs((B[0] - A[0]) * (C[1] - A[1]) -
                      (C[0] - A[0]) * (B[1] - A[1]))
    if area == 0:
        return float('inf')
    else:
        circumradius = a * b * c / (4*area)

    return circumradius


def filter_tetrahedra(points3D, tetrahedra, alpha):
    # Filter the tetrahedra by circumradius
    filtered_tetrahedra = []
    for tetra in tetrahedra:
        for k in range(len(tetra)):
            circumradius = circumradius_triangle((points3D[tetra[k % 4]], points3D[tetra[(k+1) % 4]],
                                                  points3D[tetra[(k+2) % 4]]))
            if circumradius < alpha:
                filtered_tetrahedra.append((points3D[tetra[k % 4]], points3D[tetra[(k+1) % 4]],
                                            points3D[tetra[(k+2) % 4]]))

    return np.array(filtered_tetrahedra)


def calculate_average_point_distance(points):
    distances = []
    for i in range(0, len(points), 10):
        for j in range(i + 1, len(points)):
            distances.append(np.linalg.norm(points[i] - points[j]))
    return np.mean(distances)


# Calculate average distance between neighboring points
avg_distance = calculate_average_point_distance(points3D)

# Set alpha as a fraction of the average distance
alpha = avg_distance*0.1
print(alpha)

# Filter the tetrahedra
filtered_tetrahedra = filter_tetrahedra(points3D, tri.simplices, alpha)

# Write the result to a STL file
with open("bunny.stl", "w") as f:
    f.write("solid\n")
    for tetra in filtered_tetrahedra:
        f.write("facet normal 0 0 0\n")
        f.write("outer loop\n")
        for vertex in tetra:
            f.write("vertex {} {} {}\n".format(
                vertex[0], vertex[1], vertex[2]))
        f.write("endloop\n")
        f.write("endfacet\n")
    f.write("endsolid\n")
